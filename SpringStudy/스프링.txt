
	
	* 프레임워크(FrameWork) : 어떤 대상을 구성하는 구조/틀/뻐대
	=> 소프트웨어적 개념 : 기능을 미리 클래스/인터페이스 형태로
							만들어 제공하는 반제품
							=> 어느정도 만들어진 프로젝트 (밀키트)



	* 스프링 프레임워크(Spring Framework)
	=> 자바-웹 애플리케이션을 개발하기 위한 오픈소스 프레임워크
	=> 경량 프레임워크 / 경량 컨테이너(톰캣 - 서블릿 컨테이너)
	
	* EJB (서버 중심 개발) / 중량 프레임워크 / 확장성, 유지보수
									||
									\/
	* Spring(클라이언트 중심 개발) / 경량 프레임워크 / 생산성, 안정성 (모바일)
	
	
	
	
	* 스프링의 주요 개념
	- POJO(Plain Old Java Object)기반(방식)의 프레임워크
	- 제어의 역행(IoC, Inversion of Control) 기술을 사용해서
	  애플리케이션간의 느슨한 결합을 제어
	  => 서블릿, 빈(객체) 등을 개발자가 코드로 직접 생성 X, 프레임워크가 직접 수행 O
	  
	- 의존성 주입(DI, Dependency Injection)기능을 지원
	  => 클래스 객체를 개발자가 코드로 직접 생성 X
	     프레임워크가 생성해놓은 객체를 가져다가(주입받아서) 사용 O
	
	- 관점지향 프로그래밍(AOP, Aspect-Oriented Programming)을 사용해서 자원관리
	  => 핵심기능과 부수기능을 분리구현(모듈성증가)
	
	- 영속성(persistence)관련 다양한 서비스를 지원
	
	
	
	
	
	* 스프링 주요기능
	- Core : 다른 기능들과 설정값을 분리하기 위한 IoC기능을 제공
	- Context : 스프링의 기본기능, 애플리케이션의 각 기능을 수행하는 빈(객체)에 대한 접근방법을 제공
	- DAO : JDBC기능을 편리하게 사용가능한 기능을 제공
	- ORM : 영속성 프레임워크연동 기능을 제공(하이번네이트, 마이바티스)
	- AOP : 관점지향 프로그래밍 제공
	- Web : 웹 애플리케이션 개발에 필요한 기능제공
	- WebMVC : 스프링 MVC 기능을 제공
	
	
	
	
	
	* Spring Starter Project(Spring Boot)
	- 아직까지 실무에서 사용되고 있는 프로젝트
	- 기존 프로젝트 이해에 도움
	- 다양한 소스코드/구글링이 가능
	- 모든 버전의 스프링을 사용가능
	- 초반 설정이 어려움
	- was(tomcat) 서버 리소스가 많이 필요함
	
	* Spring Legacy Project(Spring Framework)
	- 별도의 설정없이 사용가능
	- was없이 실행가능(내장서버) = 처리/로딩속도가 빠름
	- 기존의 시스템과 다른 형태의 구성
	- JSP의 활용이 까다롭다
	- 스프링 버전에 알맞은 설정값이 세팅되어있다
	
	
	
	
	
	MVC
	
	request -> Web.xml -> Controller -> Model -> DB
								|
								View
	p122							
	SpringMVC
										2)HandlerMaping
										//
	request -> Web.xml -> 1)DispatcherServlet = 3)HandlerAdapter -> 4)Controller -> Service -> DAO -> DB
							|			\\
							6)View		5)ViewResolver
							
							
							
	
	* 웹프로젝트의 구성
	- Presentation Layer : UI 를 구성하는 요소를 표현가능, 모바일 웹
	- Business Layer : Service계층, 사용자의 요구사항을 구현하는 계층
	- DataAcess Layer : Persistence Layer, 데이터 처리 계층
	- DataBase
	
	
	
	request -> Controller       ->     Service ->    DAO -> DB
					|
					View
			|Presentation Layer  | Business Layer | DataAcess Layer
	
	
	
	
	* |DataAcess Layer|
		[Spring] -> DAO -> MyBatis -> DB
	
	https://mybatis.org/mybatis-3/ko/index.html
	* MyBatis : SQL Mapper 라이브러리, JDBC연결에 필요한 다양한 기능 제공/편의성
				(try-catch-finally 제거, 디비 연결, pstmt.setOOO(), rs.getOOO())
				SQL구문을 코드와 분리해서 사용
				Spring과 MyBatis의 자동 연동(필요 라이브러리)
				동적 SQL기능 제공
	
	
	(iBatis -> MyBatis) 
	방법 1) XML 파일에 SQL구문 설정, DAO에서 연결해서 실행
			장점 : SQL구문을 별도 처리, SQL수정 프로젝트 유지보수에 유리
			단점 : 작성해야하는 코드양이 증가, 복잡성이 증가
			
	방법 2) 어노테이션 + 인터페이스 사용해서 SQL실행
			장점 : DAO 객체 없이 인터페이스만으로 개발 => 생산성 증가
			단점 : SQL수정이 발생하는 경우 매번 컴파일
			
	방법 3) XML + 인터페이스 설정해서 실행
			장점 : 간단한 SQL는 어노테이션(방법2), 복잡한 SQL구문은 XML(방법1)
			단점 : 개발자의 능력에 따른 방식이 구분
			
			
	
	* MyBatis 사용방법
	- 디비 생성 & 테이블 생성 (디비관련 준비)
	- 도메인 객체 설계 & 클래스 생성
	  도메인 : 개발에 필요한 중요한 개념을 나타내는 명사 (물리적으로 구분가능한 단위)
	- DAO 인터페이스 생성
	- 실행할 기능을 인터페이스 메서드로 정의
	- XML Mapper 생성
	- Mapper DTD 추가 설정
	- Mapper의 저장위치 설정(Namespace)
	- SQL구문 작성
	- MyBatis에서 작성한 Mapper을 연결
	- DAO인터페이스 구현(서브 클래스 생성)
	- DAO동작 호출 & 테스트
	
	
	
	
	
	
	* DB(SQL) 실행하는 순서
	
	Test -> DAO -> DAOImpl -> SqlSession -> MyBatis -> Mapper -> DB
	
	
	*회원가입
	*로그인
	*회원정보 조회
	*회원정보 수정
	*회원정보 삭제
	*회원정보 목록(list)
	
	
	
	* SpringMVC가 처리하는 작업
	- URI를 분석해서 적절한 컨트롤러를 찾기(~.me, ~.bo ...)
	- 컨트롤러에 필요한 메서드 호출
	- 컨트롤러의 결과를 뷰페이지로 전달
	- 적절한 뷰페이지 연결
	- 파라메터 자동수집
	
	
	* 개발자가 처리하는 작업
	- 특정 URI에 해당하는 컨트롤러 생성
	- 서비스 객체 (중간계층)
	- DAO 객체
	- 컨트롤러에 수행하고자 하는 동작을 메서드로 정의
	- 뷰페이지에 전달받은 데이터를 출력
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	